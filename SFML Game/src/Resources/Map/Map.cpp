#include "Map.h"

Map::Map(const char* pathToTexture) {
	if (!this->tileset.loadFromFile(pathToTexture)) printf("Failed to load tileset\n");
	else printf("Tilset loaded\n");
}
void Map::Init(Player* player) {

	this->chunkManager.tileset = this->tileset;
	this->chunkManager.player = player;
	this->chunkManager.tileSize = 32;
	this->chunkManager.tileScale = 2;

	this->chunkManager.layouts = 
	{
		{
			{224, 234, 234, 234, 244},
			{143, 255, 246, 245, 153},
			{143, 246, 246, 246, 163},
			{143, 246, 246, 246, 200},
			{143, 246, 246, 246, 200},
			{143, 246, 246, 246, 200},
			{143, 120, 120, 120, 130},
			{254, 251, 251, 251, 153},
			{200, 243, 273, 182, 164},
			{200, 243, 272, 153, 200},
			{200, 243, 283, 153, 200},
			{200, 243, 252, 153, 200}
 		},
		{
			{144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144},
			{144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144},
			{144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144},
			{144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144},
			{200, 349, 144, 144, 144, 349, 349, 349, 349, 349, 349, 200},
			{200, 200, 349, 144, 349, 200, 200, 200, 200, 200, 200, 200},
			{144, 200, 200, 349, 200, 200, 144, 144, 144, 144, 144, 144},
			{144, 144, 200, 200, 200, 144, 144, 144, 144, 144, 144, 144},
			{144, 144, 144, 200, 144, 144, 144, 144, 144, 144, 144, 144},
			{144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144},
			{144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144},
		},
		{
			{200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200},
			{200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200},
			{144, 349, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 349, 144},
			{144, 349, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 349, 144},
			{144, 349, 200, 444, 200, 200, 200, 200, 200, 444, 200, 200, 200, 349, 144},
			{144, 349, 349, 349, 349, 349, 349, 349, 349, 349, 349, 349, 349, 349, 144},
			{144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144}
		},
		{
			{144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144},
			{144, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 144},
			{144, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 144},
			{144, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 144},
			{144, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 144},
			{200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200},
			{200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200},
			{144, 144, 144, 144, 144, 349, 200, 200, 200, 144, 144, 200, 200, 144, 144},
			{144, 144, 144, 144, 144, 349, 200, 200, 200, 349, 144, 349, 349, 144, 144},
			{144, 144, 144, 144, 144, 349, 200, 444, 200, 349, 144, 144, 144, 144, 144},
			{144, 144, 144, 144, 144, 349, 200, 200, 200, 349, 144, 144, 144, 144, 144}
		},
		{
			{148, 148, 200, 141, 200, 147, 200, 147, 200, 147, 200, 148, 148},
			{200, 141, 349, 143, 349, 147, 349, 147, 349, 147, 349, 147, 200},
			{200, 142, 148, 145, 148, 148, 147, 147, 147, 147, 147, 147, 200},
			{200, 167, 134, 143, 147, 148, 147, 147, 147, 147, 147, 147, 200},
			{200, 145, 144, 144, 147, 149, 147, 147, 147, 147, 147, 147, 200}
		},
		{
			{148, 200, 200, 200, 200, 200, 200},
			{141, 349, 349, 200, 200, 349, 147},
			{142, 148, 145, 148, 148, 147, 147},
			{167, 134, 143, 147, 148, 147, 147},
			{145, 144, 144, 147, 149, 147, 147}
		},
		{
			{148, 200, 200, 200, 200, 200, 200},
			{141, 349, 349, 200, 200, 349, 147},
			{142, 148, 145, 148, 148, 147, 147},
			{167, 134, 143, 147, 148, 147, 147},
			{145, 144, 144, 147, 149, 147, 147}
		},
		{
			{200, 200, 148, 200, 200},
			{200, 148, 148, 349, 200},
			{148, 148, 145, 148, 148},
			{167, 134, 143, 147, 148},
			{145, 144, 144, 147, 149},
			{145, 144, 144, 147, 149},
			{145, 144, 144, 147, 149}
		},
		{
			{141, 141, 141, 147, 147},
			{141, 200, 349, 200, 147},
			{141, 349, 200, 200, 200},
			{141, 349, 200, 200, 200},
			{141, 349, 200, 200, 147},
			{141, 349, 200, 200, 147},
			{141, 349, 200, 443, 147},
			{200, 200, 200, 349, 147},
			{200, 200, 200, 349, 147},
			{141, 141, 443, 139, 141},
			{142, 148, 145, 148, 148},
			{167, 134, 143, 200, 148},
			{145, 144, 144, 141, 149}
		},
		{
			{141, 147, 147, 147, 147, 147, 200, 200, 200, 200, 200},
			{141, 200, 200, 200, 200, 147, 200, 200, 200, 200, 200},
			{141, 200, 200, 200, 200, 147, 200, 200, 200, 200, 200},
			{141, 200, 200, 147, 200, 147, 200, 200, 200, 200, 200},
			{200, 200, 200, 147, 200, 147, 200, 200, 200, 200, 200},
			{200, 200, 200, 147, 200, 200, 200, 200, 200, 200, 200},
			{141, 141, 443, 141, 141, 141, 141, 200, 200, 200, 141},
			{142, 148, 145, 148, 148, 148, 148, 349, 349, 349, 148},
			{167, 134, 143, 148, 148, 148, 148, 148, 148, 148, 148},
			{145, 144, 144, 149, 149, 149, 149, 149, 149, 149, 149},
			{167, 134, 143, 148, 148, 148, 148, 148, 148, 148, 148}
		} 
	};

	TileChunk* initialChunk = new TileChunk();

	initialChunk->tileset = &this->tileset;
	initialChunk->player = player;
	initialChunk->layout = chunkManager.layouts.at(0);
	initialChunk->GenerateTiles(chunkManager.tileSize, chunkManager.tileScale);
	initialChunk->position = { -120.0f, 220.0f };
	initialChunk->UpdatePosition();
	initialChunk->hasGenerated = true;
	initialChunk->destructionTime = (chunkManager.tileSize * chunkManager.tileScale / chunkManager.player->velocity.x)
		* initialChunk->GetElementSize().x;

	TileChunk* initialChunk2 = new TileChunk();

	initialChunk2->tileset = &this->tileset;
	initialChunk2->player = player;
	initialChunk2->layout = chunkManager.layouts.at(1);
	initialChunk2->GenerateTiles(chunkManager.tileSize, chunkManager.tileScale);
	initialChunk2->position = { 15.0f + chunkManager.tileSize * 8, 520.0f };
	initialChunk2->UpdatePosition();
	initialChunk2->destructionTime = (chunkManager.tileSize * chunkManager.tileScale / chunkManager.player->velocity.x)
		* initialChunk2->GetElementSize().x;

	this->chunkManager.generatedChunks.push_back(initialChunk);
	this->chunkManager.generatedChunks.push_back(initialChunk2);

	std::cout << sizeof(sf::Clock) << "\n";
}
void Map::Update(const float& dt) {
	for (auto& chunk : this->chunkManager.generatedChunks) { 
		chunk->CheckPlayerCollision();
		chunk->Update(dt);
	}
}
void Map::Draw(sf::RenderTarget& target) {
	this->chunkManager.DrawChunks(target);
}